"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[54297],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var a=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),u=o,m=p["".concat(d,".").concat(u)]||p[u]||g[u]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},39824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(58168),o=(n(96540),n(15680));const r={title:"Sort Extension Connector",sidebar_position:1},i="How to Extend Extract Node and Load Node Types",l={unversionedId:"development/extension_sort/extension_connector",id:"development/extension_sort/extension_connector",title:"Sort Extension Connector",description:"Extending Extract & Load Node",source:"@site/docs/development/extension_sort/extension_connector.md",sourceDirName:"development/extension_sort",slug:"/development/extension_sort/extension_connector",permalink:"/docs/next/development/extension_sort/extension_connector",draft:!1,editUrl:"https://github.com/apache/inlong-website/edit/master/docs/development/extension_sort/extension_connector.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Sort Extension Connector",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Manager Custom Plugin",permalink:"/docs/next/development/extension_manager/inlong_manager_plugin"},next:{title:"InLong sort format extend",permalink:"/docs/next/development/extension_sort/inlong_sort_data_organization_and_binary_protocol"}},d={},s=[{value:"Extending Extract &amp; Load Node",id:"extending-extract--load-node",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Adding Extract &amp; Load Node Definitions",id:"adding-extract--load-node-definitions",level:3},{value:"InlongMetric",id:"inlongmetric",level:4},{value:"Metadata",id:"metadata",level:4},{value:"Extending Apache Flink Connector",id:"extending-apache-flink-connector",level:2},{value:'<span id="jump1">How to Integrate Inlong Audit into Custom Connector</span>',id:"how-to-integrate-inlong-audit-into-custom-connector",level:2}],c={toc:s},p="wrapper";function g(e){let{components:t,...n}=e;return(0,o.yg)(p,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"how-to-extend-extract-node-and-load-node-types"},"How to Extend Extract Node and Load Node Types"),(0,o.yg)("h2",{id:"extending-extract--load-node"},"Extending Extract & Load Node"),(0,o.yg)("h3",{id:"introduction"},"Introduction"),(0,o.yg)("p",null,"The Extract nodes is a set of Source Connectors based on ",(0,o.yg)("a",{href:"https://flink.apache.org/"},"Apache Flink",(0,o.yg)("sup",null,"\xae"))," used to extract data from different source systems.\nThe Load nodes is a set of Sink Connectors based on ",(0,o.yg)("a",{href:"https://flink.apache.org/"},"Apache Flink",(0,o.yg)("sup",null,"\xae"))," used to load data into different storage systems."),(0,o.yg)("p",null,"When Apache InLong Sort starts, it translates a set of Extract and Load Node configurations into corresponding Flink SQL and submits them to the Flink cluster, initiating the data extraction and loading tasks specified by the user."),(0,o.yg)("h3",{id:"adding-extract--load-node-definitions"},"Adding Extract & Load Node Definitions"),(0,o.yg)("p",null,"To customize an ",(0,o.yg)("inlineCode",{parentName:"p"},"Extract Node"),", you need to inherit the ",(0,o.yg)("inlineCode",{parentName:"p"},"org.apache.inlong.sort.protocol.node.ExtractNode")," class, and to customize a ",(0,o.yg)("inlineCode",{parentName:"p"},"Load Node"),", you need to inherit the ",(0,o.yg)("inlineCode",{parentName:"p"},"org.apache.inlong.sort.protocol.node.LoadNode")," class. Both must selectively implement methods from the ",(0,o.yg)("inlineCode",{parentName:"p"},"org.apache.inlong.sort.protocol.node.Node")," interface."),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"Method Name"),(0,o.yg)("th",{parentName:"tr",align:null},"Meaning"),(0,o.yg)("th",{parentName:"tr",align:null},"Default Value"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"getId"),(0,o.yg)("td",{parentName:"tr",align:null},"Get node ID"),(0,o.yg)("td",{parentName:"tr",align:null},"Inlong StreamSource Id")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"getName"),(0,o.yg)("td",{parentName:"tr",align:null},"Get node name"),(0,o.yg)("td",{parentName:"tr",align:null},"Inlong StreamSource Name")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"getFields"),(0,o.yg)("td",{parentName:"tr",align:null},"Get field information"),(0,o.yg)("td",{parentName:"tr",align:null},"Fields defined by Inlong Stream")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"getProperties"),(0,o.yg)("td",{parentName:"tr",align:null},"Get additional node properties"),(0,o.yg)("td",{parentName:"tr",align:null},"Empty Map")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"tableOptions"),(0,o.yg)("td",{parentName:"tr",align:null},"Get Flink SQL table properties"),(0,o.yg)("td",{parentName:"tr",align:null},"Additional node properties")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"genTableName"),(0,o.yg)("td",{parentName:"tr",align:null},"Generate Flink SQL table name"),(0,o.yg)("td",{parentName:"tr",align:null},"No default value")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"getPrimaryKey"),(0,o.yg)("td",{parentName:"tr",align:null},"Get primary key"),(0,o.yg)("td",{parentName:"tr",align:null},"null")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"getPartitionFields"),(0,o.yg)("td",{parentName:"tr",align:null},"Get partition fields"),(0,o.yg)("td",{parentName:"tr",align:null},"null")))),(0,o.yg)("p",null,"Additionally, Sort has added two extra interfaces, ",(0,o.yg)("inlineCode",{parentName:"p"},"InlongMetric")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"Metadata"),", to support richer semantics."),(0,o.yg)("h4",{id:"inlongmetric"},"InlongMetric"),(0,o.yg)("p",null,"If a custom node needs to report Inlong metrics, it must implement the ",(0,o.yg)("inlineCode",{parentName:"p"},"org.apache.inlong.sort.protocol.InlongMetric")," interface.\nWhen Sort parses the configuration, it adds the startup parameter ",(0,o.yg)("inlineCode",{parentName:"p"},"'inlong.metric.labels' = 'groupId={g}&streamId={s}&nodeId={n}'")," to the table option, which is used to configure Inlong Audit.\nFor details, see ",(0,o.yg)("a",{parentName:"p",href:"#jump1"},"How to Integrate Inlong Audit into Custom Connector")),(0,o.yg)("h4",{id:"metadata"},"Metadata"),(0,o.yg)("p",null,"If a custom node needs to specify a field as a Flink SQL Metadata field, it must implement the ",(0,o.yg)("inlineCode",{parentName:"p"},"org.apache.inlong.sort.protocol.Metadata")," interface.\nSort will automatically mark the corresponding field as Metadata when parsing the configuration."),(0,o.yg)("h2",{id:"extending-apache-flink-connector"},"Extending Apache Flink Connector"),(0,o.yg)("p",null,"Sort is implemented based on Apache Flink version 1.15. For information on how to extend the Apache Flink Connector, refer to ",(0,o.yg)("a",{href:"https://nightlies.apache.org/flink/flink-docs-release-1.15/zh/docs/dev/table/sourcessinks/"},"User-defined Sources & Sinks")),(0,o.yg)("h2",{id:"how-to-integrate-inlong-audit-into-custom-connector"},(0,o.yg)("span",{id:"jump1"},"How to Integrate Inlong Audit into Custom Connector")),(0,o.yg)("p",null,"Inlong Sort encapsulates the metric reporting process in the ",(0,o.yg)("inlineCode",{parentName:"p"},"org.apache.inlong.sort.base.metric.SourceExactlyMetric")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"org.apache.inlong.sort.base.metric.SinkExactlyMetric")," classes. Developers only need to initialize the corresponding ",(0,o.yg)("inlineCode",{parentName:"p"},"Metric")," object according to the Source/Sink type to implement metric reporting."),(0,o.yg)("p",null,"The common practice is to pass parameters such as the InLong Audit address when constructing the Source/Sink, and initialize the ",(0,o.yg)("inlineCode",{parentName:"p"},"SourceExactlyMetric/SinkExactlyMetric")," object when calling the open() method to initialize the Source/Sink operator. After processing the actual data, call the corresponding audit reporting method."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"public class StarRocksDynamicSinkFunctionV2<T> extends StarRocksDynamicSinkFunctionBase<T> {\n\n    private static final long serialVersionUID = 1L;\n    private static final Logger log = LoggerFactory.getLogger(StarRocksDynamicSinkFunctionV2.class);\n\n    private transient SinkExactlyMetric sinkExactlyMetric;\n\n    private String inlongMetric;\n    private String auditHostAndPorts;\n    private String auditKeys;\n    private String stateKey;\n\n    public StarRocksDynamicSinkFunctionV2(StarRocksSinkOptions sinkOptions,\n            TableSchema schema,\n            StarRocksIRowTransformer<T> rowTransformer, String inlongMetric,\n            String auditHostAndPorts, String auditKeys) {\n        this.sinkOptions = sinkOptions;\n        \n        // pass the params of inlong audit\n        this.auditHostAndPorts = auditHostAndPorts;\n        this.inlongMetric = inlongMetric;\n        this.auditKeys = auditKeys;\n    }\n\n    @Override\n    public void open(Configuration parameters) {\n\n        // init SinkExactlyMetric in open()\n        MetricOption metricOption = MetricOption.builder().withInlongLabels(inlongMetric)\n                .withAuditAddress(auditHostAndPorts)\n                .withAuditKeys(auditKeys)\n                .build();\n\n        if (metricOption != null) {\n            sinkExactlyMetric = new SinkExactlyMetric(metricOption, getRuntimeContext().getMetricGroup());\n        }\n    }\n    \n    @Override\n    public void invoke(T value, Context context)\n            throws IOException, ClassNotFoundException, JSQLParserException {\n        Object[] data = rowTransformer.transform(value, sinkOptions.supportUpsertDelete());\n\n        sinkManager.write(\n                null,\n                sinkOptions.getDatabaseName(),\n                sinkOptions.getTableName(),\n                serializer.serialize(schemaUtils.filterOutTimeField(data)));\n\n        // output audit after write data to sink\n        if (sinkExactlyPropagateMetric != null) {\n            sinkExactlyPropagateMetric.invoke(1, getDataSize(value), schemaUtils.getDataTime(data));\n        }\n    }\n")))}g.isMDXComponent=!0}}]);